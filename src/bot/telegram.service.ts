import { Injectable } from '@nestjs/common';
import { PrismaService } from 'nestjs-prisma';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { MyContext, StepsEnum } from './interfaces/telegram.interface';

//  695606474 –ú–æ–π id
@Injectable()
export class TelegramService {

  private readonly idAdmin = 695606474;

  constructor(
    @InjectBot() private readonly bot: Telegraf,
    private readonly prismaService: PrismaService
  ) {
  }

  async handleStart( ctx: MyContext ) {
    const telegramId = ctx.from.id;
    ctx.session.name = '';
    ctx.session.numberPhone = '';
    ctx.session.isRegistered = false;
    ctx.session.appointmentIdForEdit = '';
    ctx.session.step = null;

    const user = await this.prismaService.user.findUnique({
      where: { telegramId }
    });

    if ( user ) {
      ctx.session.isRegistered = true;
    }

    if ( !ctx.session.isRegistered && telegramId !== this.idAdmin ) {
      if ( 'callback_query' in ctx.update ) {
        return ctx.editMessageText(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n–ü—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ :)`, {
          reply_markup: {
            inline_keyboard: [ [ {
              text: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
              callback_data: 'register'
            } ] ]
          }
        });
      }
      return ctx.reply(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n–ü—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ :)`, {
        reply_markup: {
          inline_keyboard: [ [ {
            text: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
            callback_data: 'register'
          } ] ]
        }
      });
    }

    return this.handleProfile(ctx);
  }

  async handleText( ctx: MyContext ) {
    const telegramId = ctx.from.id;
    const text = 'message' in ctx.update && 'text' in ctx.update.message && ctx.update.message.text;
    const user = await this.prismaService.user.findUnique({ where: { telegramId } });

    if ( ctx.session.step === StepsEnum.editName ) {
      ctx.session.step = null;
      const newName = text.split('').map(( e, i ) => i === 0 ? e.toUpperCase() : e).join('');
      const updatedUser = await this.prismaService.user.update({
        where: { telegramId },
        data: {
          name: newName + ' ' + user.name.split(' ')[1]
        }
      });

      return ctx.reply(`–í–∞—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§–ò: ${updatedUser.name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${updatedUser.numberPhone}`, {
        reply_markup: {
          inline_keyboard: [ [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]
        }
      });
    }

    if ( ctx.session.step === StepsEnum.editLastName ) {
      ctx.session.step = null;
      const newLastName = text.split('').map(( e, i ) => i === 0 ? e.toUpperCase() : e).join('');

      const updatedUser = await this.prismaService.user.update({
        where: { telegramId },
        data: {
          name: user.name.split(' ')[0] + ' ' + newLastName
        }
      });
      return ctx.reply(`–í–∞—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§–ò: ${updatedUser.name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${updatedUser.numberPhone}`, {
        reply_markup: {
          inline_keyboard: [ [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]
        }
      });
    }

    if ( ctx.session.step === StepsEnum.editPhone ) {
      ctx.session.step = null;
      const updatedUser = await this.prismaService.user.update({
        where: { telegramId },
        data: { numberPhone: text }
      });
      return ctx.reply(`–í–∞—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§–ò: ${updatedUser.name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${updatedUser.numberPhone}`, {
        reply_markup: {
          inline_keyboard: [ [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]
        }
      });
    }

    if ( ctx.session.step === StepsEnum.name ) {
      if ( text.split(' ').length === 2 ) {
        ctx.session.name = text;
        ctx.session.step = StepsEnum.numberPhone;
        return ctx.reply(`–•–æ—Ä–æ—à–æ, ${ctx.session.name.split(' ')[0]}, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890`, {
          reply_markup: {
            inline_keyboard: [ [ { text: '–û—Ç–º–µ–Ω–∞', callback_data: 'start' } ] ]
          }
        });
      }
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', {
        reply_markup: {
          inline_keyboard: [ [ { text: '–û—Ç–º–µ–Ω–∞', callback_data: 'start' } ] ]
        }
      });
    }

    if ( ctx.session.step === StepsEnum.numberPhone ) {

      const phone = 'text' in ctx.message && ctx.message.text;
      const phoneRegex = /^\+7\d{10}$/;
      if ( !phoneRegex.test(phone) ) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º' +
          ' —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +71234567890).');
      }
      ctx.session.numberPhone = phone;

      await this.prismaService.user.upsert({
        where: { numberPhone: phone },
        update: {
          telegramId,
          name: ctx.session.name
        },
        create: {
          telegramId,
          name: ctx.session.name,
          numberPhone: ctx.session.numberPhone
        }
      });

      ctx.session.numberPhone = phone;
      ctx.session.isRegistered = true;
      ctx.session.step = null;


      return ctx.reply(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: \n–§–ò: ${ctx.session.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${ctx.session.numberPhone}`, {
        reply_markup: {
          inline_keyboard: [ [ {
            text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è',
            callback_data: 'free_appointments'
          }, { text: '–ú–æ–∏ –∑–∞–ø–∏—Å–∏', callback_data: 'appointments' } ], [ {
            text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
            callback_data: 'edit_user_data'
          } ] ]
        }
      });
    }

    if ( ctx.session.step === StepsEnum.addFreeSlot ) {
      const input = 'text' in ctx.message && ctx.message.text;

      const dateRegex = /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2]) (\d{2}):(\d{2})/;

      if ( !dateRegex.test(input) ) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: DD.MM HH:mm\n–ù–∞–ø—Ä–∏–º–µ—Ä: 10.02 14:30');
      }

      let [ day, month, hours, minutes ] = input.split(/[\.\s:]+/);
      let numberMonth = Number(month);
      let numberDay = Number(day);
      let numberHours = Number(hours);
      let numberMinutes = Number(minutes);

      let currentYear = new Date().getFullYear();
      let dateTime = new Date(currentYear, numberMonth - 1, numberDay, numberHours, numberMinutes);
      let now = new Date();

      if ( dateTime < now ) {
        if ( now.getMonth() === 11 && numberMonth <= 6 ) {
          dateTime.setFullYear(currentYear + 1);
          await ctx.reply(`‚ö†Ô∏è –î–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞, –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥: ${this.dateTimeFormatted(dateTime)}`);
        } else {
          return ctx.reply('‚ùå –≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É.');
        }
      }

      const existingAppointment = await this.prismaService.appointment.findFirst({
        where: {
          dateTime: dateTime
        },
        include: {
          user: true
        }
      });

      if ( existingAppointment ) {
        const user = existingAppointment.user;
        if ( existingAppointment.isBooked ) {
          return ctx.reply(`
‚ùå **–≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –∏ –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–∞—Ö**

üóì **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏**: *${this.dateTimeFormatted(existingAppointment.dateTime)}*  
üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**: *${user?.numberPhone.replace(/([.!()+])/g, '\\$1')}*  
üë§ **–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞**: *${user?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}*`, {
            parse_mode: 'MarkdownV2',
            reply_markup: {
              inline_keyboard: [ [ {
                text: 'üîô –ù–∞–∑–∞–¥',
                callback_data: 'profile'
              } ] ]
            }
          });
        }

        return ctx.reply(`
  ‚úÖ **–≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –∏ –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö**
  
  üóì **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏**: *${this.dateTimeFormatted(existingAppointment.dateTime)}*  
  üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**: *${user?.numberPhone.replace(/([.!()+])/g, '\\$1')}*  
  üë§ **–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞**: *${user?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}*`, {
          parse_mode: 'MarkdownV2',
          reply_markup: {
            inline_keyboard: [ [ {
              text: 'üîô –ù–∞–∑–∞–¥',
              callback_data: 'profile'
            } ] ]
          }
        });
      }

      await this.prismaService.appointment.create({
        data: {
          dateTime,
          isBooked: false
        }
      });

      const message = `
‚úÖ **–°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω\\!**
üóì **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏**: *${this.dateTimeFormatted(dateTime)}*`;

      ctx.session.step = null;

      return ctx.reply(message, {
        parse_mode: 'MarkdownV2', reply_markup: {
          inline_keyboard: [ [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]
        }
      });

    }

    if ( ctx.session.step === StepsEnum.addOccupiedSlot ) {
      const input = 'text' in ctx.message && ctx.message.text;

      const datePhoneRegex = /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2]) (\d{2}):(\d{2}) (\+7\d{10})$/;

      if ( !datePhoneRegex.test(input) ) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: DD.MM HH:mm' +
          ' +7XXXXXXXXXX\n–ù–∞–ø—Ä–∏–º–µ—Ä: 10.02 14:30 +7XXXXXXXXXX');
      }

      let [ day, month, hours, minutes, phone ] = input.split(/[\.\s:]+/);
      let numberMonth = Number(month);
      let numberDay = Number(day);
      let numberHours = Number(hours);
      let numberMinutes = Number(minutes);

      let currentYear = new Date().getFullYear();
      let dateTime = new Date(currentYear, numberMonth - 1, numberDay, numberHours, numberMinutes);
      let now = new Date();

      if ( dateTime < now ) {
        if ( now.getMonth() === 11 && numberMonth <= 6 ) {
          dateTime.setFullYear(currentYear + 1);
          await ctx.reply(`‚ö†Ô∏è –î–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞, –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥: ${this.dateTimeFormatted(dateTime)}`);
        } else {
          return ctx.reply('‚ùå –≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É.');
        }
      }

      const existingAppointment = await this.prismaService.appointment.findFirst({
        where: {
          dateTime: dateTime
        },
        include: {
          user: true
        }
      });


      if ( existingAppointment ) {
        const user = existingAppointment.user;
        if ( existingAppointment.isBooked ) {
          return ctx.reply(`
‚ùå **–≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –∏ –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–∞—Ö**

üóì **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏**: *${this.dateTimeFormatted(existingAppointment.dateTime)}*  
üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**: *${user?.numberPhone.replace(/([.!()+])/g, '\\$1')}*  
üë§ **–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞**: *${user?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}*`, {
            parse_mode: 'MarkdownV2',
            reply_markup: {
              inline_keyboard: [ [ {
                text: 'üîô –ù–∞–∑–∞–¥',
                callback_data: 'profile'
              } ] ]
            }
          });
        }

        return ctx.reply(`
  ‚úÖ **–≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –∏ –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö**
  
  üóì **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏**: *${this.dateTimeFormatted(existingAppointment.dateTime)}*  
  üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**: *${user?.numberPhone.replace(/([.!()+])/g, '\\$1')}*  
  üë§ **–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞**: *${user?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}*`, {
          parse_mode: 'MarkdownV2',
          reply_markup: {
            inline_keyboard: [ [ {
              text: 'üîô –ù–∞–∑–∞–¥',
              callback_data: 'profile'
            } ] ]
          }
        });
      }

      const isBooked = ctx.session.isBooked ?? false;

      await this.prismaService.appointment.create({
        data: {
          dateTime,
          isBooked,
          user: {
            connectOrCreate: {
              where: { numberPhone: phone },
              create: { numberPhone: phone }
            }
          }
        }
      });

      ctx.session.step = null;
      ctx.session.isBooked = null;

      const message = `
‚úÖ **–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞\\!**
üóì **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏**: *${this.dateTimeFormatted(dateTime)}*
üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**: *${phone.replace(/([.!()+])/g, '\\$1')}*`;


      return ctx.reply(message, {
        parse_mode: 'MarkdownV2', reply_markup: {
          inline_keyboard: [ [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]
        }
      });

    }

  }

  async handleAddSlot( ctx: MyContext, isBooked: boolean ) {
    if ( ctx.from.id !== this.idAdmin ) {
      return ctx.reply('–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
    }

    ctx.session.step = isBooked ? StepsEnum.addOccupiedSlot : StepsEnum.addFreeSlot;

    ctx.session.isBooked = isBooked;
    if ( ctx.session.step === StepsEnum.addFreeSlot ) {
      return ctx.editMessageText(
        `–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞: \n\nDD.MM HH:mm\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 10.02 14:30`, {
          reply_markup: {
            inline_keyboard: [ [ {
              text: 'üîô –ù–∞–∑–∞–¥',
              callback_data: 'profile'
            } ] ]
          }
        }
      );
    }
    return ctx.editMessageText(
      `–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∏ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n\nDD.MM HH:mm +7–•–•–•–•–•–•–•–•–•–•\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 10.02 14:30 +71234567890`, {
        reply_markup: {
          inline_keyboard: [ [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]
        }
      }
    );
  }

  async handleRegister( ctx: MyContext ) {
    const cb = ctx.callbackQuery;
    if ( 'data' in cb && cb.data === 'register' ) {
      ctx.session.step = StepsEnum.name;
      await ctx.editMessageText(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è –§–∞–º–∏–ª–∏—è".`, {
        reply_markup: {
          inline_keyboard: [ [ { text: '–û—Ç–º–µ–Ω–∞', callback_data: 'start' } ] ]
        }
      });
      return;
    }
  }

  async handleProfile( ctx: MyContext ) {
    const telegramId = ctx.from.id;
    const user = await this.prismaService.user.findUnique({
      where: { telegramId }
    });

    if ( 'callback_query' in ctx.update ) {
      if ( ctx.update.callback_query.from.id === this.idAdmin ) {
        return ctx.editMessageText('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –õ–∏–ª–∏—è. \n–•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è ‚ù§Ô∏è', {
          reply_markup: {
            inline_keyboard: [ [ {
              text: 'üìå –ë–ª–∏–∂–∞–π—à–∞—è –∑–∞–ø–∏—Å—å',
              callback_data: 'appointments_nearest'
            }, {
              text: 'üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
              callback_data: 'appointments_today'
            } ], [ {
              text: 'üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é',
              callback_data: 'appointments_week'
            }, {
              text: 'üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Å—è—Ü',
              callback_data: 'appointments_month'
            } ], [ {
              text: '–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã',
              callback_data: 'add_free_slot'
            } ], [ {
              text: '–î–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏',
              callback_data: 'add_occupied_slot'
            } ] ]
          }
        });
      }
      return ctx.editMessageText(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.name.split(' ')[0]}, –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:\n\n–ò–º—è: ${user.name.split(' ')[0]}\n–§–∞–º–∏–ª–∏—è: ${user.name.split(' ')[1]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${user.numberPhone}`, {
        reply_markup: {
          inline_keyboard: [ [ {
            text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è',
            callback_data: 'free_appointments'
          }, { text: '–ú–æ–∏ –∑–∞–ø–∏—Å–∏', callback_data: 'appointments' } ], [ {
            text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
            callback_data: 'edit_user_data'
          } ] ]
        }
      });
    }

    if ( 'message' in ctx.update && ctx.message.from.id === this.idAdmin ) {
      return ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –õ–∏–ª–∏—è. \n–•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è ‚ù§Ô∏è', {
        reply_markup: {
          inline_keyboard: [ [ {
            text: 'üìå  –ë–ª–∏–∂–∞–π—à–∞—è –∑–∞–ø–∏—Å—å',
            callback_data: 'appointments_nearest'
          }, {
            text: 'üìÖ  –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
            callback_data: 'appointments_today'
          } ], [ {
            text: 'üìÜ  –ó–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é',
            callback_data: 'appointments_week'
          }, {
            text: 'üóìÔ∏è  –ó–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Å—è—Ü',
            callback_data: 'appointments_month'
          } ], [ {
            text: '–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã',
            callback_data: 'add_free_slot'
          } ], [ {
            text: '–î–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏',
            callback_data: 'add_occupied_slot'
          } ] ]
        }
      });
    }

    return ctx.reply(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.name.split(' ')[0]}, –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:\n\n–ò–º—è: ${user.name.split(' ')[0]}\n–§–∞–º–∏–ª–∏—è: ${user.name.split(' ')[1]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${user.numberPhone}`, {
      reply_markup: {
        inline_keyboard: [ [ {
          text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è',
          callback_data: 'free_appointments'
        }, { text: '–ú–æ–∏ –∑–∞–ø–∏—Å–∏', callback_data: 'appointments' } ], [ {
          text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
          callback_data: 'edit_user_data'
        } ] ]
      }
    });
  }

  async handleNearestAppointments( ctx: MyContext ) {
    const appointment = await this.prismaService.appointment.findFirst({
      where: { isBooked: true },
      include: { user: true },
      orderBy: { dateTime: 'asc' }
    });

    if ( !appointment ) {
      return ctx.editMessageText('‚è≥ –ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–ø–∏—Å–µ–π.', {
        reply_markup: {
          inline_keyboard: [ [ { text: '–ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]

        }
      });
    }
    const phoneFormatted = appointment.user?.numberPhone.replace(/([.!()+])/g, '\\$1');

    const formattedDate = this.dateTimeFormatted(appointment.dateTime);

    return ctx.editMessageText(
      `üìå *–ë–ª–∏–∂–∞–π—à–∞—è –∑–∞–ø–∏—Å—å:*\n\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* ${formattedDate}\nüë§ *–ö–ª–∏–µ–Ω—Ç:* ${appointment.user?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\nüìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phoneFormatted || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
      {
        parse_mode: 'MarkdownV2', reply_markup: {
          inline_keyboard: [ [ { text: '–ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]
        }
      }
    );
  }

  async handleTodayAppointments( ctx: MyContext ) {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const tomorrow = new Date();
    tomorrow.setDate(today.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);

    const appointments = await this.prismaService.appointment.findMany({
      where: {
        isBooked: true,
        dateTime: { gte: today, lt: tomorrow }
      },
      include: { user: true },
      orderBy: { dateTime: 'asc' }
    });

    if ( appointments.length === 0 ) {
      return ctx.editMessageText('üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.', {
        reply_markup: {
          inline_keyboard: [ [ { text: '–ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]

        }
      });
    }


    const message = appointments
      .map(( a ) => `üïí ${this.dateTimeFormatted(a.dateTime)} ‚Äì ${a.user?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç'} üìû ${a.user?.numberPhone.replace(/([.!()+])/g, '\\$1') || '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}`)
      .join('\n');

    return ctx.editMessageText(`üìÖ *–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n${message}`, { parse_mode: 'MarkdownV2' });
  }

  async handleWeekAppointments( ctx: MyContext ) {
    const today = new Date();
    const nextWeek = new Date();
    nextWeek.setDate(today.getDate() + 7);

    const appointments = await this.prismaService.appointment.findMany({
      where: {
        isBooked: true,
        dateTime: { gte: today, lt: nextWeek }
      },
      include: { user: true },
      orderBy: { dateTime: 'asc' }
    });

    if ( appointments.length === 0 ) {
      return ctx.editMessageText('üìÜ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.', {
        reply_markup: {
          inline_keyboard: [ [ { text: '–ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]

        }
      });
    }

    const message = appointments
      .map(( a ) => `üìÖ ${this.dateTimeFormatted(a.dateTime)} ‚Äì ${a.user?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç'} üìû ${a.user?.numberPhone.replace(/([.!()+])/g, '\\$1') || '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}`)
      .join('\n');

    return ctx.editMessageText(`üìÜ *–ó–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n${message}`, {
      parse_mode: 'MarkdownV2',
      reply_markup: {
        inline_keyboard: [ [ { text: '–ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]

      }
    });
  }

  async handleMonthAppointments( ctx: MyContext ) {
    const today = new Date();
    const nextMonth = new Date();
    nextMonth.setMonth(today.getMonth() + 1);

    const appointments = await this.prismaService.appointment.findMany({
      where: {
        isBooked: true,
        dateTime: { gte: today, lt: nextMonth }
      },
      include: { user: true },
      orderBy: { dateTime: 'asc' }
    });

    if ( appointments.length === 0 ) {
      return ctx.editMessageText('üìÖ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.', {
        reply_markup: {
          inline_keyboard: [ [ { text: '–ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]

        }
      });
    }

    const message = appointments
      .map(( a ) => `üìÖ ${this.dateTimeFormatted(a.dateTime)} ‚Äì ${a.user?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç'} üìû ${a.user?.numberPhone.replace(/([.!()+])/g, '\\$1') || '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}`)
      .join('\n');

    return ctx.editMessageText(`üìÖ *–ó–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Å—è—Ü:*\n\n${message}`, {
      parse_mode: 'MarkdownV2', reply_markup: {
        inline_keyboard: [ [ { text: '–ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]

      }
    });
  }

  async handleEditUserData( ctx: MyContext ) {
    return ctx.editMessageText('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å ?', {
      reply_markup: {
        inline_keyboard: [ [ {
          text: '–ò–º—è',
          callback_data: 'edit_user_name'
        }, {
          text: '–§–∞–º–∏–ª–∏—è',
          callback_data: 'edit_lastname_user'
        } ], [ {
          text: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
          callback_data: 'edit_phone_user'
        } ], [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]
      }
    });
  }

  async handleEditUserName( ctx: MyContext ) {
    ctx.session.step = StepsEnum.editName;
    return ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è.');
  }

  async handleEditUserLastName( ctx: MyContext ) {
    ctx.session.step = StepsEnum.editLastName;
    return ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é.');
  }

  async handleEditPhoneUser( ctx: MyContext ) {
    ctx.session.step = StepsEnum.editPhone;
    return ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
  }

  async handleMyOccupiedAppointments( ctx: MyContext ) {
    const telegramId = ctx.from.id;
    const appointments = await this.prismaService.appointment.findMany({
      where: {
        user: {
          telegramId
        }
      },
      orderBy: {
        dateTime: 'asc'
      }
    });
    if ( appointments.length === 0 ) {
      return ctx.editMessageText('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.', {
        reply_markup: {
          inline_keyboard: [ [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]
        }
      });
    }

    const inlineKeyboard = appointments.map(( appointment, index ) => {
      return {
        text: this.dateTimeFormatted(appointment.dateTime, true),
        callback_data: `occupied_appointment_${appointment.id}`
      };
    });

    const groupedKeyboard = [];
    for ( let i = 0; i < inlineKeyboard.length; i += 2 ) {
      groupedKeyboard.push(inlineKeyboard.slice(i, i + 2));
    }


    return ctx.editMessageText('–ú–æ–∏ –∑–∞–ø–∏—Å–∏:', {
      reply_markup: {
        inline_keyboard: [ ...groupedKeyboard, [ {
          text: 'üîô –ù–∞–∑–∞–¥',
          callback_data: 'profile'
        } ] ]
      }
    });

  }

  async handleFreeAppointments( ctx: MyContext ) {
    const appointments = await this.prismaService.appointment.findMany({
      where: {
        isBooked: false
      },
      orderBy: {
        dateTime: 'asc'
      }
    });
    if ( appointments.length === 0 ) {
      return ctx.editMessageText(`–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏`);
    }

    const inlineKeyboard = appointments.map(( appointment, index ) => {
      return {
        text: this.dateTimeFormatted(appointment.dateTime, true),
        callback_data: `free_appointment_${appointment.id}`
      };
    });

    const groupedKeyboard = [];
    for ( let i = 0; i < inlineKeyboard.length; i += 2 ) {
      groupedKeyboard.push(inlineKeyboard.slice(i, i + 2));
    }

    return ctx.editMessageText('–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:', {
      parse_mode: 'MarkdownV2',
      reply_markup: {
        inline_keyboard: [ ...groupedKeyboard, [ {
          text: 'üîô –ù–∞–∑–∞–¥',
          callback_data: 'profile'
        } ] ]
      }
    });

  }

  async handleFreeAppointment( ctx: MyContext ) {
    const cb = ctx.callbackQuery;
    const id = 'data' in cb && cb.data.split('_')[2];

    const appointment = await this.prismaService.appointment.findUnique({
      where: {
        id
      }
    });


    const message = `
  ‚úÖ **–°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç \\!**
  
üóì **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–ª–æ—Ç–∞**: *${this.dateTimeFormatted(appointment.dateTime)}*

_–î–ª—è –±—Ä–æ–Ω–∏ —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ_`;

    return ctx.editMessageText(message, {
      parse_mode: 'MarkdownV2',
      reply_markup: {
        inline_keyboard: [ [ {
          text: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç',
          callback_data: `book_appointment_${id}`
        } ], [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'free_appointments' } ] ]
      }
    });
  }

  async handleOccupiedAppointment( ctx: MyContext ) {
    const cb = ctx.callbackQuery;
    const id = 'data' in cb && cb.data.split('_')[2];
    ctx.session.appointmentIdForEdit = '';
    const appointment = await this.prismaService.appointment.findUnique({
      where: {
        id
      },
      include: {
        user: true
      }
    });

    const phoneFormatted = appointment.user?.numberPhone.replace(/([.!()+])/g, '\\$1');
    const userName = appointment.user?.name;

    const message = `
  ‚úÖ **–í–∞—à–∞ –∑–∞–ø–∏—Å—å \\!**
  
üóì **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏**: *${this.dateTimeFormatted(appointment.dateTime)}*
üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**: *${phoneFormatted}*
üë§ **–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞**: *${userName}*

_–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å_
  `;

    return ctx.editMessageText(message, {
      parse_mode: 'MarkdownV2',
      reply_markup: {
        inline_keyboard: [ [ {
          text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å',
          callback_data: `edit_appointment_${id}`
        } ], [ {
          text: '–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å',
          callback_data: `delete_appointment_${id}`
        } ], [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'appointments' } ] ]
      }
    });


  }

  async handleDeleteAppointment( ctx: MyContext ) {
    const cb = ctx.callbackQuery;
    const id = 'data' in cb && cb.data.split('_')[2];
    await this.prismaService.appointment.update({
      where: { id },
      data: {
        user: { disconnect: true },
        isBooked: false
      }
    });
    return ctx.editMessageText('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', {
      reply_markup: {
        inline_keyboard: [ [ {
          text: 'üîô –ù–∞–∑–∞–¥',
          callback_data: `appointments`
        } ] ]
      }
    });

  }

  async handleEditAppointment( ctx: MyContext ) {
    const cb = ctx.callbackQuery;
    const id = 'data' in cb && cb.data.split('_')[2];
    ctx.session.appointmentIdForEdit = id;
    const message = `–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∑–∞–ø–∏—Å–∏ ?`;

    return ctx.editMessageText(message, {
      reply_markup: {
        inline_keyboard: [ [ {
          text: '–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
          callback_data: 'edit_user_data'
        } ], [ {
          text: '–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è',
          callback_data: 'show_free_appointments_for_edit'
        } ], [ {
          text: 'üîô –ù–∞–∑–∞–¥',
          callback_data: `occupied_appointment_${id}`
        } ] ]
      }
    });

  }

  async handleShowFreeAppointments( ctx: MyContext ) {
    const freeAppointments = await this.prismaService.appointment.findMany({
      where: {
        isBooked: false
      },
      orderBy: {
        dateTime: 'asc'
      }
    });

    if ( freeAppointments.length === 0 ) {
      return ctx.editMessageText(`–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏`);
    }

    const inlineKeyboard = freeAppointments.map(( appointment, index ) => {
      return {
        text: this.dateTimeFormatted(appointment.dateTime, true),
        callback_data: `show_free_appointment_${appointment.id}`
      };
    });

    const groupedKeyboard = [];
    for ( let i = 0; i < inlineKeyboard.length; i += 2 ) {
      groupedKeyboard.push(inlineKeyboard.slice(i, i + 2));
    }

    return ctx.editMessageText('–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:', {
      parse_mode: 'MarkdownV2',
      reply_markup: {
        inline_keyboard: [ ...groupedKeyboard, [ {
          text: 'üîô –ù–∞–∑–∞–¥',
          callback_data: `edit_appointment_${ctx.session.appointmentIdForEdit}`
        } ] ]
      }
    });
  }

  async handleShowFreeAppointment( ctx: MyContext ) {
    const cb = ctx.callbackQuery;
    const id = 'data' in cb && cb.data.split('_')[3];
    const newAppointment = await this.prismaService.appointment.findUnique({
      where: {
        id
      }
    });

    const oldAppointment = await this.prismaService.appointment.findUnique({
      where: {
        id: ctx.session.appointmentIdForEdit
      }
    });

    ;

    const message = `
  ‚ùì **–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ \\?**
    
  üóì **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏**:  *${this.dateTimeFormatted(oldAppointment.dateTime)}*
  üóì **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞**: *${this.dateTimeFormatted(newAppointment.dateTime)}*

  _–î–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ_`;

    return ctx.editMessageText(message, {
      parse_mode: 'MarkdownV2',
      reply_markup: {
        inline_keyboard: [ [ {
          text: '–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è',
          callback_data: `change_time_appointment_${id}`
        } ], [ {
          text: 'üîô –ù–∞–∑–∞–¥',
          callback_data: 'show_free_appointments_for_edit'
        } ] ]
      }
    });

  }

  async handleChangeTimeAppointment( ctx: MyContext ) {
    const cb = ctx.callbackQuery;
    const id = 'data' in cb && cb.data.split('_')[3];
    const telegramId = cb.from.id;
    await this.prismaService.appointment.update({
      where: {
        id: ctx.session.appointmentIdForEdit
      },
      data: {
        user: {
          disconnect: true
        },
        isBooked: false
      }
    });

    const newAppointment = await this.prismaService.appointment.update({
      where: {
        id
      },
      data: {
        user: {
          connect: {
            telegramId
          }
        },
        isBooked: true
      }
    });

    return ctx.editMessageText(
      `‚úÖ *–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞*\n\nüìÖ *–ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* ${this.dateTimeFormatted(newAppointment.dateTime)}\n\n_–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Å–Ω–æ–≤–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç\\._`,
      {
        parse_mode: 'MarkdownV2',
        reply_markup: {
          inline_keyboard: [ [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' } ] ]
        }
      }
    );
  }

  async handleBookAppointment( ctx: MyContext ) {
    const cb = ctx.callbackQuery;
    const id = 'data' in cb && cb.data.split('_')[2];
    const telegramId = cb.from.id;


    const appointment = await this.prismaService.appointment.update({
      where: { id },
      data: {
        user: {
          connect: { telegramId: BigInt(telegramId) }
        },
        isBooked: true
      },
      include: { user: true }
    });

    return ctx.editMessageText(
      `   ‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å\\!*\n\n
üóì  –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: *${this.dateTimeFormatted(appointment.dateTime)}*
üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *${appointment.user.numberPhone.replace(/([.!()+])/g, '\\$1')}*
üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: *${appointment.user.name}*
  
–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å\\! –ú—ã –∂–¥–µ–º –≤–∞—Å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\\.\n
_–ß—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ_\\.`,
      {
        parse_mode: 'MarkdownV2',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥',
                callback_data: 'free_appointments'
              },
              {
                text: '–ú–æ–∏ –∑–∞–ø–∏—Å–∏',
                callback_data: 'appointments'
              }
            ]
          ]
        }
      }
    );
  }

  private readonly dateTimeFormatted = ( date: Date, isButton?: boolean ) => {
    if ( isButton ) {
      return date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: 'short',
        hour: '2-digit',
        minute: '2-digit'
      }).replace(/([!()])/g, '\\$1');
    }
    return date.toLocaleString('ru-RU', {
      day: '2-digit',
      month: 'short',
      hour: '2-digit',
      minute: '2-digit'
    }).replace(/([.!()])/g, '\\$1');
  };


}